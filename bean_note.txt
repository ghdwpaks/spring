제어 역전
(*https://gangnam-americano.tistory.com/60 발췌)
    
    IoC(Inversion of Control)이란?
    IoC란 Inversion of Control의 약자로 해석하자면 제어의 역전이다. 
    제어권이 뒤 바뀌었다는 뜻이다. 이말은 기존의 제어방식을 뒤집었다는 말이 된다.

    모든 작업을 사용하는 쪽에서 제어하게 되면서 IoC 컨테이너에서 제어하게 되는데, 기본적으로 컨테이너는 객체를 생성하고 객체간의 의존성을 이어주는 역할을 한다.

    정리 : Spring Container > IoC 컨테이너

bean(빈)의 정의
(*https://velog.io/@gillog/Spring-Bean-%EC%A0%95%EB%A6%AC 발췌)
    Spring에서는 Spring Container, IoC Container라는 개념을 사용한다.

    Spring Container는 Spring Framework의 핵심부에 위치하며, 종속 객체 주입을 이용하여 Application을 구성하는 Component들을 관리한다.

    이때 Spring Container에서 생성되는 객체를 Bean이라고 한다.
    좀 더 정확히 말하자면,
    Bean은 Spring IoC Container가 관리하는 자바 객체, Spring Bean Container에 존재하는 객체를 말한다.

    Spring에서 Bean은 보통 Singleton으로 존재한다.
    Singleton : 어떤 Class가 최초 한번만 메모리를 할당하고(Static) 그 메모리에 객체를 만들어 사용하는 디자인 패턴

    Spring에서 POJO(Plain Old Java Object)를 Beans라고 부른다.
    POJO : 본래 자바의 장점을 살리는 특정 '기술'에 종속되어 동작하는 것이 아닌 '오래된' 방식의 '순수한' 자바객체

    Beans는 Application의 핵심을 이루는 객체이며, 대부분 Container에 공급하는 설정 메타 데이터(XML 파일)에 의해 생성된다
    Container는 이 메타 데이터를 통해 Bean의 생성, Bean Life Cycle(빈의 생명주기), Bean Dependency(종속성) 등을 알 수 있다.
    new 연산자로 생성하는 객체는 Bean이 아니고, ApplicationContext.getBean()으로 얻어질 수 있는 객체는 Bean이다.
    즉, Spring에서의 Bean은 ApplicationContext가 알고있는 객체, 즉 ApplicationContext가 만들어서 그 안에 담고있는 객체를 의미한다.

빈의 생명주기와 생성
(* https://atoz-develop.tistory.com/entry/Spring-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88Bean%EC%9D%98-%EA%B0%9C%EB%85%90%EA%B3%BC-%EC%83%9D%EC%84%B1-%EC%9B%90%EB%A6%AC , https://haruhiism.tistory.com/186 발췌)
    
    Spring IoC 컨테이너가 IoC 컨테이너를 만들고 그 안에 bean 을 등록할때 사용하는 인터페이스들을 라이프 사이클 콜백이라고 부른다.

    라이프 사이클 콜백 중에는 @Component 애노테이션을 찾아서 이 애노테이션이 붙어있는 모든 클래스의 인스턴스를 생성해 bean 으로 등록하는 작업을 수행하는 어노테이션 프로세서가 등록돼있다.

    스프링의 컨테이너는 Bean 객체들을 관리한다. 객체들을 관리한다는 것은 단순히 싱글턴으로 제공하거나 필요한 곳에 주입하는 것뿐 아니라 객체의 생성과 소멸, 즉 생명주기(Life cycle)를 관리한다는 것을 의미한다.

    즉 Bean 객체의 생명주기는 해당 객체가 언제, 어떻게 생성되어 소멸되기 전까지 어떤 작업을 수행하고 언제, 어떻게 소멸되는지와 같은 일련의 과정을 이르는 말이다. 스프링의 컨테이너는 이런 Bean 객체의 생명 주기를 컨테이너의 생명 주기 내에서 관리하고 객체 생성이나 소멸 시 호출될 수 있는 콜백 메서드를 제공하고 있다. 이는 콜백 인터페이스 구현, Aware 시리즈 인터페이스 구현, Bean 클래스 내부에 커스텀 메서드 구현, @PostConstruct, @PreDestroy 어노테이션 등으로 구현할 수 있다.


    정리 : Spring > Spring Container > IoC 컨테이너 > 라이프 사이클 (생명주기) 콜백 > @Component 를 찾아서 bean 으로 등록하는 프로세서
    


bean 을 생성하는 방법은 @Component 어노테이션을 달아서 찾는(Scanning) 과정을 거쳐서 bean 을 등록(생성)하는것이고, 나머지 하나는 직접 bean 설정파일에 bean 을 등록하는 방법이다.

1. Component Scanning
    위에서 나온대로
    Spring Container 안에
    IoC Container 안에
    라이프 사이클 콜백 안에
    @Component 를 찾는 프로세서
    @Component 가 써진 클래스를 bean 으로써 등록하는 프로세서

    순으로 기능들이 존재한다고 나와있다.

    '이 @ComponentScan 애노테이션은 어디서부터 컴포넌트를 찾아볼 것인지 알려주는 역할을 한다.
    @ComponentScan이 붙어있는 클래스가 있는 패키지에서부터 모든 하위 패키지의 모든 클래스를 훑어보며 @Component 애노테이션(또는 @Component 애노테이션을 사용하는 다른 애노테이션)이 붙은 클래스를 찾는다.
    Spring이 IoC Container(컨테이너)를 만들때 위와 같은 과정을 거쳐 bean 으로 등록해주는 것이다.'

    그러니까, class 에 써져있는 어노테이션 말고, 어노테이션 안에 있는 어노테이션중에 있는 @Component 까지 찾아서 bean 을 등록해준다는  이야기다.


2. bean 설정파일에 직접 bean 을 등록

    ' 자바 설정파일은 자바 클래스를 생성해서 작성할 수 있으며 일반적으로 xxxxConfiguration와 같이 명명한다.
    그리고 클래스에 @Configuration 애노테이션을 붙인다.
    그 안에 @Bean 애노테이션을 사용해 직접 빈을 정의한다. 

        @Configuration
        public class SampleConfiguration {
            @Bean
            public SampleController sampleController() {
                return new SampleController;
            }
        }

    sampleController()에서 리턴되는 객체가 IoC 컨테이너 안에 빈으로 등록된다.
    물론 이렇게 빈을 직접 정의해서 등록하면 @Component 애노테이션을 붙이지 않아도 된다.
    @Configuration 애노테이션을 보면 이 애노테이션도 @Component를 사용하기 때문에 @ComponentScan의 스캔 대상이 되고 그에 따라 빈 설정파일이 읽힐때 그 안에 정의한 빈들이 IoC 컨테이너에 등록되는 것이다. '



https://developyo.tistory.com/159
bean 의 scope 에 대한 문서

https://jjingho.tistory.com/6
어노테이션들에 대한 문서








